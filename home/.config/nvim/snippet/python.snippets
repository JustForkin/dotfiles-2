snippet i "import ..." b
import ${1:module}
endsnippet

snippet f "from ... import ..." b
from ${1:module} import ${2:target}
endsnippet

snippet for "for v in iter:" b
for ${1:v} in ${2:iter}:
	${3:pass}
endsnippet

snippet if "if cond:" b
if ${1:cond}:
	${2:pass}
endsnippet

snippet elif "elif cond:" b
elif ${1:cond}:
	${2:pass}
endsnippet

snippet else "else:" b
else:
	${1:pass}
endsnippet

snippet try "try ... except" b
try:
	${1:pass}
except ${2:Exception}:
	${3:pass}
endsnippet

snippet while "while cond:" b
while ${1:cond}:
	${2:pass}
endsnippet

snippet def "def func():" b
def ${1:funcname}($2):
	${0:raise NotImplementedError}
endsnippet

snippet defm "def method(self):" b
def ${1:methodname}(self$2):
	${0:raise NotImplementedError}
endsnippet

snippet deft "def test_func():" b
def test_${1:funcname}(self$2):
	${0:assert 0}
endsnippet

snippet class "class ClassName" b
class ${1:ClassName}(${2:object}):
	${0:pass}
endsnippet

snippet ct "class TestClassName" b
class Test${1:ClassName}(${2:object}):
	${0:pass}
endsnippet

snippet new "def __new__():" b
def __new__(cls, $1*args, **kwargs):
	${0:raise NotImplementedError}
endsnippet

snippet init "def __init__():" b
def __init__(self$1):
	${0:raise NotImplementedError}
endsnippet

snippet del "def __del__():" b
def __del__(self):
	${0:raise NotImplementedError}
endsnippet

snippet repr "def __repr():" b
def __repr__(self):
	${0:raise NotImplementedError}
endsnippet

snippet str "def __str__():" b
def __str__(self):
	${0:raise NotImplementedError}
endsnippet

snippet lt "def __lt__():" b
def __lt__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet le "def __le__():" b
def __le__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet eq "def __eq__():" b
def __eq__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet ne "def __ne__():" b
def __ne__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet gt "def __gt__():" b
def __gt__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet ge "def __ge__():" b
def __ge__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet cmp "def __cmp__():" b
def __cmp__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet hash "def __hash__():" b
def __hash__(self):
	${0:raise NotImplementedError}
endsnippet

snippet nonzero "def __nonzero__():" b
def __nonzero__(self):
	${0:raise NotImplementedError}
endsnippet

snippet unicode "def __unicode__():" b
def __unicode__(self):
	${0:raise NotImplementedError}
endsnippet

snippet getattr "def __getattribute__():" b
def __getattribute__(self, name):
	${0:raise NotImplementedError}
endsnippet

snippet setattr "def __setattr__():" b
def __setattr__(self, name, value):
	${0:raise NotImplementedError}
endsnippet

snippet delattr "def __delattr__():" b
def __delattr__(self, name):
	${0:raise NotImplementedError}
endsnippet

snippet get "def __get__():" b
def __get__(self, instance, owner=None):
	${0:raise NotImplementedError}
endsnippet

snippet set "def __set__():" b
def __set__(self, instance, value):
	${0:raise NotImplementedError}
endsnippet

snippet delete "def __delete__():" b
def __delete__(self, instance):
	${0:raise NotImplementedError}
endsnippet

snippet slots "__slots__" b
__slots__ = [$1]
endsnippet

snippet metaclass "__metaclass__" b
__metaclass__ = ${1:MetaClass}
endsnippet

snippet call "def __call__():" b
def __call__(self$1):
	${0:raise NotImplementedError}
endsnippet

snippet len "def __len__():" b
def __len__(self):
	${0:raise NotImplementedError}
endsnippet

snippet getitem "def __getitem__():" b
def __getitem__(self, key):
	${0:raise NotImplementedError}
endsnippet

snippet setitem "def __setitem__():" b
def __setitem__(self, key, value):
	${0:raise NotImplementedError}
endsnippet

snippet delitem "def __delitem__():" b
def __delitem__(self, key):
	${0:raise NotImplementedError}
endsnippet

snippet iter "def __iter__():" b
def __iter__(self):
	${0:raise NotImplementedError}
endsnippet

snippet contains "def __contains__():" b
def __contains__(self, item):
	${0:raise NotImplementedError}
endsnippet

snippet add "def __add__():" b
def __add__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet sub "def __sub__():" b
def __sub__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet mul "def __mul__():" b
def __mul__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet floordiv "def __floordiv__():" b
def __floordiv__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet mod "def __mod__():" b
def __mod__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet divmod "def __divmod__():" b
def __divmod__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet pow "def __pow__():" b
def __pow__(self, other${1:, modulo}):
	${0:raise NotImplementedError}
endsnippet

snippet lshift "def __lshift__():" b
def __lshift__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rshift "def __rshift__():" b
def __rshift__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet and "def __and__():" b
def __and__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet xor "def __xor__():" b
def __xor__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet or "def __or__():" b
def __or__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet div "def __div__():" b
def __div__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet truediv "def __truediv__():" b
def __truediv__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet radd "def __radd__():" b
def __radd__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rsub "def __rsub__():" b
def __rsub__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rmul "def __rmul__():" b
def __rmul__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rdiv "def __rdiv__():" b
def __rdiv__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rtruediv "def __rtruediv__():" b
def __rtruediv__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rfloordiv "def __rfloordiv__():" b
def __rfloordiv__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rmod "def __rmod__():" b
def __rmod__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rdivmod "def __rdivmod__():" b
def __rdivmod__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rpow "def __rpow__():" b
def __rpow__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rlshift "def __rlshift__():" b
def __rlshift__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rrshift "def __rrshift__():" b
def __rrshift__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rand "def __rand__():" b
def __rand__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet rxor "def __rxor__():" b
def __rxor__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet ror "def __ror__():" b
def __ror__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet iadd "def __iadd__():" b
def __iadd__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet isub "def __isub__():" b
def __isub__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet imul "def __imul__():" b
def __imul__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet idiv "def __idiv__():" b
def __idiv__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet itruediv "def __itruediv__():" b
def __itruediv__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet ifloordiv "def __ifloordiv__():" b
def __ifloordiv__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet imod "def __imod__():" b
def __imod__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet ipow "def __ipow__():" b
def __ipow__(self, other${1:, modulo}):
	${0:raise NotImplementedError}
endsnippet

snippet ilshift "def __ilshift__():" b
def __ilshift__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet irshift "def __irshift__():" b
def __irshift__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet iand "def __iand__():" b
def __iand__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet ixor "def __ixor__():" b
def __ixor__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet ior "def __ior__():" b
def __ior__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet neg "def __neg__():" b
def __neg__(self):
	${0:raise NotImplementedError}
endsnippet

snippet pos "def __pos__():" b
def __pos__(self):
	${0:raise NotImplementedError}
endsnippet

snippet abs "def __abs__():" b
def __abs__(self):
	${0:raise NotImplementedError}
endsnippet

snippet invert "def __invert__():" b
def __invert__(self):
	${0:raise NotImplementedError}
endsnippet

snippet complex "def __complex__():" b
def __complex__(self):
	${0:raise NotImplementedError}
endsnippet

snippet int "def __int__():" b
def __int__(self):
	${0:raise NotImplementedError}
endsnippet

snippet long "def __long__()" b
def __long__(self):
	${0:raise NotImplementedError}
endsnippet

snippet float "def __float__():" b
def __float__(self):
	${0:raise NotImplementedError}
endsnippet

snippet oct "def __oct__():" b
def __oct__(self):
	${0:raise NotImplementedError}
endsnippet

snippet hex "def __hex__():" b
def __hex__(self):
	${0:raise NotImplementedError}
endsnippet

snippet index "def __index__():" b
def __index__(self):
	${0:raise NotImplementedError}
endsnippet

snippet coerce "def __coerce__():" b
def __coerce__(self, other):
	${0:raise NotImplementedError}
endsnippet

snippet enter "def __enter__():" b
def __enter__(self):
	${0:raise NotImplementedError}
endsnippet

snippet exit "def __exit__():" b
def __exit__(self, exc_type, exc_value, traceback):
	${0:raise NotImplementedError}
endsnippet

snippet with "with ..." b
with ${1:context}:
	${0:raise NotImplementedError}
endsnippet

snippet is "isinstance()" i
isinstance(${1:inst}, ${2:cls})
endsnippet

snippet doc "docstring" b
"""$0
"""
endsnippet

snippet pdb "import pdb; pdb.set_trace()" b
import pdb; pdb.set_trace()
endsnippet

snippet here "os.path.abspath(os.path.dirname(__file__))" b
here = os.path.abspath(os.path.dirname(__file__))
endsnippet

snippet ar "*args" !wi
*args
endsnippet

snippet kw "**kwargs" !wi
**kwargs
endsnippet

snippet ak "*args, **kwargs" !wi
*args, **kwargs
endsnippet

snippet as "assert" b
assert ${0:0}
endsnippet

snippet r "return" !b
return 
endsnippet

snippet pd "import pandas" !b
import pandas as pd
endsnippet

snippet np "import numpy" !b
import numpy as np
endsnippet
